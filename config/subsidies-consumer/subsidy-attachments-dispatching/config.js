const BATCH_SIZE = parseInt(process.env.BATCH_SIZE) || 100;
const MU_CALL_SCOPE_ID_INITIAL_SYNC = process.env.MU_CALL_SCOPE_ID_INITIAL_SYNC || 'http://redpencil.data.gift/id/concept/muScope/deltas/consumer/initialSync';
const BYPASS_MU_AUTH_FOR_EXPENSIVE_QUERIES = process.env.BYPASS_MU_AUTH_FOR_EXPENSIVE_QUERIES == 'true' ? true : false;
const DIRECT_DATABASE_ENDPOINT = process.env.DIRECT_DATABASE_ENDPOINT || 'http://virtuoso:8890/sparql';
const MAX_DB_RETRY_ATTEMPTS = parseInt(process.env.MAX_DB_RETRY_ATTEMPTS || 5);
const SLEEP_BETWEEN_BATCHES = parseInt(process.env.SLEEP_BETWEEN_BATCHES || 1000);
const MAX_FILE_DOWNLOAD_RETRY_ATTEMPTS = parseInt(process.env.MAX_FILE_DOWNLOAD_RETRY_ATTEMPTS || 5);
const SLEEP_TIME_AFTER_FAILED_FILE_DOWNLOAD_OPERATION = parseInt(process.env.SLEEP_TIME_AFTER_FAILED_FILE_DOWNLOAD_OPERATION || 1000);
const SLEEP_TIME_AFTER_FAILED_DB_OPERATION = parseInt(process.env.SLEEP_TIME_AFTER_FAILED_DB_OPERATION || 60000);
const INGEST_GRAPH = process.env.INGEST_GRAPH || `http://mu.semte.ch/application`;
const SYNC_LOGIN_ENDPOINT = process.env.DCR_SYNC_LOGIN_ENDPOINT;
const SECRET_KEY = process.env.DCR_SECRET_KEY;

if(!process.env.DCR_SYNC_BASE_URL)
  throw `Expected 'DCR_SYNC_BASE_URL' to be provided.`;
const SYNC_BASE_URL = process.env.DCR_SYNC_BASE_URL;

module.exports = {
  BATCH_SIZE,
  MU_CALL_SCOPE_ID_INITIAL_SYNC,
  BYPASS_MU_AUTH_FOR_EXPENSIVE_QUERIES,
  DIRECT_DATABASE_ENDPOINT,
  MAX_DB_RETRY_ATTEMPTS,
  SLEEP_BETWEEN_BATCHES,
  SLEEP_TIME_AFTER_FAILED_DB_OPERATION,
  INGEST_GRAPH,
  SYNC_BASE_URL,
  SYNC_LOGIN_ENDPOINT,
  SECRET_KEY,
  MAX_FILE_DOWNLOAD_RETRY_ATTEMPTS,
  SLEEP_TIME_AFTER_FAILED_FILE_DOWNLOAD_OPERATION
};
